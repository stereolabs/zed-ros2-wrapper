##############################
#  Artifacts default values  #
##############################
#Folders to be saved after the build
.artifacts_files:
  paths: &artifacts_files_definition
    - ros2_ws/install

#Folders to be saved after the tests
.test_artifacts_files:
  paths: &test_artifacts_files_definition
    #- lib/test/bin/data/current/*
    - ros2/test/bin/data/current/*

#XML files to be used for Gitlab test report interface
.test_artifacts_report_files:
  reports: &test_artifacts_report_files_definition
    #junit: lib/test/bin/output/*/*_test_*.xml
    junit: ros2/test/bin/output/*/*_test_*.xml

.linux_artifacts:
  name: &linux_artifacts_naming_definition "${CI_PROJECT_NAMESPACE}_${CI_PROJECT_NAME}_${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"

#Artifacts configuration
.artifacts_config:
  expire_in: &artifacts_expire_in_definition 2 weeks

############
#  Stages  #
############
stages:
  - build
  - unit_test
  - deploy
  - deploy_docker


variables:
  #GIT_SUBMODULE_STRATEGY: normal
  GIT_SUBMODULE_STRATEGY: recursive
  #GIT_CLONE_PATH: $CI_BUILDS_DIR/ros2_ws/src/$CI_PROJECT_NAME # must be enabled in the configuration of the runners!

######################
# BUILDER selection  #
######################

.linux_docker_builder_target:
  tags: &linux_docker_builder_target_definition
    - docker-builder
    - linux

# deploy-support is actually linux + docker (but for weaker builder)
.deploy_target:
  tags: &deploy_target_definition
    - deploy-support

.linux_docker_builder_qemu_target:
  tags: &linux_docker_builder_qemu_target_definition
    - docker-builder
    - linux
    - qemu-support

.linux_docker_builder_native_target:
  tags: &linux_docker_builder_native_target_definition
    - jetson
    - L4T35.1


######################
# Runner selection  #
######################

# generic
.runner_linux_jetson_l4t35_1_target:
  tags: &runner_linux_jetson_l4t35_1_target_definition
    - linux
    - jetson
    - L4T35.1

.runner_linux_jetson_l4t32_7_target:
  tags: &runner_linux_jetson_l4t32_7_target_definition
    - linux
    - jetson
    - L4T32.7

.runner_linux_jetson_nano_l4t32_7_target:
  tags: &runner_linux_jetson_nano_l4t32_7_target_definition
    - linux
    - jetson
    - nano
    - perfTest
    - L4T32.7

.runner_linux_jetson_tx2_nx_l4t32_7_target:
  tags: &runner_linux_jetson_tx2_nx_l4t32_7_target_definition
    - linux
    - jetson
    - tx2_nx
    - perfTest
    - L4T32.7

.runner_linux_jetson_xavier_nx_l4t35_1_target:
  tags: &runner_linux_jetson_xavier_nx_l4t35_1_target_definition
    - linux
    - jetson
    - xavier_nx
    - perfTest
    - L4T35.1

.runner_linux_jetson_xavier_agx_l4t35_1_target:
  tags: &runner_linux_jetson_xavier_agx_l4t35_1_target_definition
    - linux
    - jetson
    - xavier
    - perfTest
    - L4T35.1

.runner_linux_jetson_orin_agx_l4t35_1_target:
  tags: &runner_linux_jetson_orin_agx_l4t35_1_target_definition
    - linux
    - jetson
    - orin
    - perfTest
    - L4T35.1

.runner_linux_jetson_live_l4t32_7_target:
  tags: &runner_linux_jetson_live_l4t32_7_target_definition
    - linux
    - jetson
    - live-runner
    - L4T32.7

.runner_ubuntu18_desktop_live_cuda11_0_target:
  tags: &runner_ubuntu18_desktop_live_cuda11_0_target_definition
    - ubuntu18
    - x86_64
    - perfTest
    - CUDA11
    - live-runner

.runner_ubuntu18_desktop_cuda11_0_target:
  tags: &runner_ubuntu18_desktop_cuda11_0_target_definition
    - ubuntu18
    - x86_64
    - perfTest
    - CUDA11

.runner_ubuntu_docker_desktop_target:
  tags: &runner_ubuntu_docker_desktop_target_definition
    - x86_64
    - docker-runner
    - linux

.runner_ubuntu_docker_live_desktop_target:
  tags: &runner_ubuntu_docker_live_desktop_target_definition
    - x86_64
    - docker-runner
    - linux
    - live-runner
    - deploy-support

## Memory target
.memory_ubuntu18_desktop_cuda11_0_target:
  tags: &memory_ubuntu18_desktop_cuda11_0_target_definition
    - ubuntu18
    - x86_64
    - memTest
    - CUDA11

######################
#    Build script    #
######################
.build_script_linux_humble:
  script: &humble_linux_build_script_definition
    - sudo chmod +x .ci/run_build_in_humble.sh
    - ./.ci/run_build_in_humble.sh

#################
#  Build Tasks  #
#################

humble_u22_cu117_build:
  stage: build  
  #image: stereolabs/ci-compiler:ubuntu22.04-cuda11.7-tensorrt8.4.2-ros2-humble
  image: myzhar/test:ubuntu22.04-cuda11.7-tensorrt8.4.2-ros2-humble
  tags: *linux_docker_builder_target_definition
  script: *humble_linux_build_script_definition
  artifacts:
    name: *linux_artifacts_naming_definition
    paths: *artifacts_files_definition
    expire_in: *artifacts_expire_in_definition
  when: on_success

humble_l4t35_1_build:
  stage: build
  image: dustynv/ros:humble-ros-base-l4t-r35.1.0
  # Consider using qemu in the future
  tags: *linux_docker_builder_qemu_target_definition
  #tags: *linux_docker_builder_native_target_definition
  script: *humble_linux_build_script_definition
  artifacts:
    name: *linux_artifacts_naming_definition
    paths: *artifacts_files_definition
    expire_in: *artifacts_expire_in_definition
  when: on_success  

######################
#     Test script    #
######################
.setup_docker_sdk_before_script_linux:
  before_script: &linux_docker_install_sdk_before_script_definition
    - echo "Europe/Paris" > /etc/localtime
    - mv ZED_SDK_*.run ZED_SDK_Linux.run
    - apt update || true ; apt install -y lsb-release wget less udev sudo build-essential cmake python3 python3-dev zstd python3-pip python3-wheel git binutils-dev jq libusb-1* libopencv-dev
    - chmod +x ZED_SDK_Linux.run ; ./ZED_SDK_Linux.run -- silent
    - ln -sf /usr/bin/python3 /usr/bin/python
    - python -m pip install wheel setuptools #scikit-build
    #- python -m pip install opencv-python-headless
    # Replace libs by debug info ones
    #- mv lib/build/libsl_ai_dbginfo.so /usr/local/zed/lib/libsl_ai.so
    #- mv lib/build/libsl_zed_dbginfo.so /usr/local/zed/lib/libsl_zed.so

.setup_sdk_before_script_linux:
  before_script: &linux_install_sdk_before_script_definition
    - ls lib/build/*
    - mv ZED_SDK_*.run ZED_SDK_Linux.run
    - sudo apt update || true ; sudo apt install -y binutils-dev zstd jq git cmake
    - chmod +x ZED_SDK_Linux.run ; ./ZED_SDK_Linux.run -- silent
    # Replace libs by debug info ones
    #- mv lib/build/libsl_ai_dbginfo.so /usr/local/zed/lib/libsl_ai.so
    #- mv lib/build/libsl_zed_dbginfo.so /usr/local/zed/lib/libsl_zed.so

.setup_sdk_u22_cu117_web_before_script:
  before_script: &setup_sdk_u22_cu117_web_before_script_definition
    - sudo chmod +x .ci/download_and_install_sdk.sh 
    - ./.ci/download_and_install_sdk.sh 22 11 7 3 8
    # clean previous artifacts
    - rm -rf ../ros2_ws
    # create new ROS2 workspace folders
    - mkdir -p ../ros2_ws/install
    # move new artifacts in the workspace folder
    - cp -a ./ros2_ws/install ../ros2_ws/
    - rm -rf ./ros2_ws/

.test_script_linux:
  script: &linux_test_script_definition
    - sudo chmod +x .ci/run_tests.sh
    - ./.ci/run_tests.sh

###################
# Unit Test tasks #
###################

unit_test_ros2_humble_u22_cu117:
  stage: unit_test
  #image: stereolabs/ci-runner:ubuntu22.04-cuda11.7-ros2-humble
  image: myzhar/test:ubuntu22.04-cuda11.7-ros2-humble-v1.1
  tags: *runner_ubuntu_docker_live_desktop_target_definition
  before_script: *setup_sdk_u22_cu117_web_before_script_definition
  script: *linux_test_script_definition
  #artifacts:
  #  when: always
  #  name: *linux_artifacts_naming_definition
  #  paths: *test_artifacts_files_definition
  #  expire_in: *artifacts_expire_in_definition
  #  reports: *test_artifacts_report_files_definition
  needs: 
    - job: humble_u22_cu117_build
      artifacts: true
  when: manual

#####################
# Docker Deploy #
#####################

# ROS 2 Humble U22 Docker Image DEVEL - use the current branch source to build the wrapper
ros2_humble_u22_docker_image_dev:
  needs: 
  - job: humble_u22_cu117_build
  stage: deploy_docker
  image: docker
  services: 
    - docker:dind
  script: 
    - docker login -u $CI_REGISTRY_USER_WALT -p $CI_REGISTRY_PASSWORD_WALT
    - cd docker
    - IMG_TAG=${CI_PROJECT_NAME}_u22_cuda121_humble_${CI_COMMIT_BRANCH}
    - ./desktop_build_dockerfile_from_sdk_ubuntu_and_cuda_version.sh ubuntu22.04 cuda12.1.0 zedsdk4.1.2
    - docker tag  zed_ros2_desktop_image "myzhar/zed-ros2-devel:${IMG_TAG}"
    - docker push myzhar/zed-ros2-devel:${IMG_TAG}
  when: on_success
  tags: *linux_docker_builder_target_definition
  except:
    - master
  allow_failure: true

# ROS 2 Humble L4T Docker Image DEVEL - use the current branch source to build the wrapper
ros2_humble_l4t_docker_image_dev:
  needs: 
  - job: humble_l4t35_1_build
  stage: deploy_docker
  image: docker
  services: 
    - docker:dind
  script: 
    - docker login -u $CI_REGISTRY_USER_WALT -p $CI_REGISTRY_PASSWORD_WALT
    - cd docker
    - IMG_TAG=${CI_PROJECT_NAME}_l4t35_4_humble_${CI_COMMIT_BRANCH}
    - ./jetson_build_dockerfile_from_sdk_and_l4T_version.sh l4t-r35.4.1 zedsdk4.1.2
    - docker tag  zed_ros2_l4t_image "myzhar/zed-ros2-devel:${IMG_TAG}"
    - docker push myzhar/zed-ros2-devel:${IMG_TAG}
    - rm -r ./tmp_sources
  when: on_success
  tags: *linux_docker_builder_qemu_target_definition
  except:
    - master
  allow_failure: true

#################
# GitHub Deploy #
#################

  # Update Github master branch
github_push:
  needs: 
  - job: humble_u22_cu117_build
    artifacts: false
  - job: humble_l4t35_1_build
    artifacts: false
  stage: deploy
  image: alpine
  script: 
    - apk add --no-cache bash git
    - git config --global user.email "support@stereolabs.com"
    - git config --global user.name "Stereolabs"
    - git clone http://wlucetti:${GITLAB_PULL_TOKEN}@192.168.1.93/sl/zed-ros2-wrapper.git
    - cd zed-ros2-wrapper
    - git remote set-url origin https://${GITHUB_PUSH_TOKEN}@github.com/stereolabs/zed-ros2-wrapper.git
    - git remote -v
    - git config pull.rebase false
    - git pull origin master --allow-unrelated-histories
    - git push https://${GITHUB_PUSH_TOKEN}@github.com/stereolabs/zed-ros2-wrapper.git
  when: on_success
  tags:
    - docker-builder
    - linux
  only:
    - master
  allow_failure: true

